/*
 * This file is generated by jOOQ.
 */
package edu.java.domain.jooq.jooqGen;


import edu.java.domain.jooq.jooqGen.tables.Chat;
import edu.java.domain.jooq.jooqGen.tables.Chatandlink;
import edu.java.domain.jooq.jooqGen.tables.Databasechangeloglock;
import edu.java.domain.jooq.jooqGen.tables.Link;
import edu.java.domain.jooq.jooqGen.tables.Linkstackoverflow;
import edu.java.domain.jooq.jooqGen.tables.records.ChatRecord;
import edu.java.domain.jooq.jooqGen.tables.records.ChatandlinkRecord;
import edu.java.domain.jooq.jooqGen.tables.records.DatabasechangeloglockRecord;
import edu.java.domain.jooq.jooqGen.tables.records.LinkRecord;
import edu.java.domain.jooq.jooqGen.tables.records.LinkstackoverflowRecord;

import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ChatRecord> CHAT_PKEY = Internal.createUniqueKey(Chat.CHAT, DSL.name("chat_pkey"), new TableField[] { Chat.CHAT.CHATID }, true);
    public static final UniqueKey<ChatandlinkRecord> CHATANDLINK_PKEY = Internal.createUniqueKey(Chatandlink.CHATANDLINK, DSL.name("chatandlink_pkey"), new TableField[] { Chatandlink.CHATANDLINK.LINKID, Chatandlink.CHATANDLINK.CHATID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<LinkRecord> LINK_PKEY = Internal.createUniqueKey(Link.LINK, DSL.name("link_pkey"), new TableField[] { Link.LINK.LINKID }, true);
    public static final UniqueKey<LinkstackoverflowRecord> LINKSTACKOVERFLOW_PKEY = Internal.createUniqueKey(Linkstackoverflow.LINKSTACKOVERFLOW, DSL.name("linkstackoverflow_pkey"), new TableField[] { Linkstackoverflow.LINKSTACKOVERFLOW.LINKID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ChatandlinkRecord, ChatRecord> CHATANDLINK__CHATANDLINK_CHATID_FKEY = Internal.createForeignKey(Chatandlink.CHATANDLINK, DSL.name("chatandlink_chatid_fkey"), new TableField[] { Chatandlink.CHATANDLINK.CHATID }, Keys.CHAT_PKEY, new TableField[] { Chat.CHAT.CHATID }, true);
    public static final ForeignKey<ChatandlinkRecord, LinkRecord> CHATANDLINK__CHATANDLINK_LINKID_FKEY = Internal.createForeignKey(Chatandlink.CHATANDLINK, DSL.name("chatandlink_linkid_fkey"), new TableField[] { Chatandlink.CHATANDLINK.LINKID }, Keys.LINK_PKEY, new TableField[] { Link.LINK.LINKID }, true);
    public static final ForeignKey<LinkstackoverflowRecord, LinkRecord> LINKSTACKOVERFLOW__LINKSTACKOVERFLOW_LINKID_FKEY = Internal.createForeignKey(Linkstackoverflow.LINKSTACKOVERFLOW, DSL.name("linkstackoverflow_linkid_fkey"), new TableField[] { Linkstackoverflow.LINKSTACKOVERFLOW.LINKID }, Keys.LINK_PKEY, new TableField[] { Link.LINK.LINKID }, true);
}
